package main

import (
	// 	"os"

	"fmt"

	"github.com/r4ulcl/NetTask/manager"
	"github.com/r4ulcl/NetTask/worker"
	"github.com/spf13/cobra"
	"github.com/spf13/pflag"
)

// @title NetTask API
// @version 1.0
// @description NetTask API documentation
// @contact.name r4ulcl
// @contact.url https://r4ulcl.com/contact/
// @contact.email me@r4ulcl.com

// @license.name  GPL-3.0
// @license.url https://github.com/r4ulcl/NetTask/blob/main/LICENSE

// @BasePath /
// @Security OAuth2.0
// @SecurityDefinitions OAuth2.0

// Config holds configuration parameters
type Arguments struct {
	ConfigFile    string
	CertFolder    string
	Swagger       bool
	Verbose       bool
	VerifyAltName bool
}

func main() {
	var arguments Arguments

	var rootCmd = &cobra.Command{
		Use:   "nTask",
		Short: "Your program description",
		Run: func(cmd *cobra.Command, args []string) {
			// Your global command logic here
			fmt.Println("Global command")
		},
		PersistentPreRunE: func(cmd *cobra.Command, args []string) error {
			return validateGlobalFlags(cmd.Flags(), &arguments)
		},
	}

	// Add global flags to the root command
	rootCmd.PersistentFlags().BoolP("swagger", "s", false, "Start the swagger endpoint (/swagger)")
	rootCmd.PersistentFlags().BoolP("verbose", "v", false, "Set verbose mode")
	rootCmd.PersistentFlags().BoolP("verifyAltName", "a", false, "Set verifyAltName to true")

	// Add manager subcommand
	var managerCmd = &cobra.Command{
		Use:   "manager",
		Short: "Run the manager module",
		Run: func(cmd *cobra.Command, args []string) {
			// Your manager command logic here
			fmt.Println("Manager:")
			managerStart(&arguments)
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return validateSubcommandFlags(cmd.Flags(), &arguments)
		},
	}

	// Add flags specific to the manager subcommand
	managerCmd.Flags().StringVarP(&arguments.ConfigFile, "configFile", "c", "", "Path to the config file")
	managerCmd.Flags().StringVarP(&arguments.CertFolder, "certFolder", "f", "", "TLS cert folder (generated by script)")

	// Add worker subcommand
	var workerCmd = &cobra.Command{
		Use:   "worker",
		Short: "Run the worker module",
		Run: func(cmd *cobra.Command, args []string) {
			// Your worker command logic here
			fmt.Println("Worker:")
			workerStart(&arguments)
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return validateSubcommandFlags(cmd.Flags(), &arguments)
		},
	}

	// Add flags specific to the worker subcommand
	workerCmd.Flags().StringVarP(&arguments.ConfigFile, "configFile", "c", "", "Path to the config file")
	workerCmd.Flags().StringVarP(&arguments.CertFolder, "certFolder", "f", "", "TLS cert folder (generated by script)")

	// Add subcommands to the root command
	rootCmd.AddCommand(managerCmd, workerCmd)

	// Execute the commands
	if err := rootCmd.Execute(); err != nil {
		fmt.Println(err)
	}
}

func managerStart(arguments *Arguments) {
	// Use config parameters to start the manager
	manager.StartManager(arguments.Swagger, arguments.ConfigFile, arguments.CertFolder, arguments.VerifyAltName, arguments.Verbose)
}

func workerStart(arguments *Arguments) {
	// Use config parameters to start the worker
	worker.StartWorker(arguments.Swagger, arguments.ConfigFile, arguments.CertFolder, arguments.VerifyAltName, arguments.Verbose)
}

func validateGlobalFlags(flags *pflag.FlagSet, arguments *Arguments) error {
	var err error
	arguments.Swagger, err = flags.GetBool("swagger")
	if err != nil {
		return err
	}

	arguments.Verbose, err = flags.GetBool("verbose")
	if err != nil {
		return err
	}

	arguments.VerifyAltName, err = flags.GetBool("verifyAltName")
	return err
}

func validateSubcommandFlags(flags *pflag.FlagSet, arguments *Arguments) error {
	return validateGlobalFlags(flags, arguments)
}
